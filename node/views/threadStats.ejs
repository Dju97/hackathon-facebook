<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Messenger Stats</title>

    <!-- Custom styles for this template -->
    <link href="https://fonts.googleapis.com/css?family=Playfair+Display:700,900" rel="stylesheet">
    <!-- <link href="{% static 'css/blog.css' %}" rel="stylesheet"> -->
    <!-- <link href="{% static 'css/dist.min.css' %}" rel="stylesheet"> -->
    <link href="css/dist.min.css" rel="stylesheet">
    <link href="css/blog.css" rel="stylesheet">
  </head>

  <body onload='draw()'>
    <h3 class="mt-5">Bar Chart</h3>
    <canvas id="barChart" width="100%" height="40"></canvas>

    <h3 class="mt-5">Network</h3>
    <div id="mynetwork" style="height:300px"></div>

    <script src="js/jquery.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
    <script src="js/sigma.min.js"></script>
    <script type="text/javascript">
      var ctx = document.getElementById('barChart').getContext('2d');

      var myBarChart = new Chart(ctx, {
          type: 'horizontalBar',
          data: {
            labels: ['A', 'B', 'C', 'D', 'E'],
            datasets: [{
                label: 'Messages',
                backgroundColor: 'rgb(52, 58, 64)',
                borderColor: 'rgb(52, 58, 64)',
                data: [2, 10, 6, 12, 4]
            }]
          },
          options: {
            scales: {
                xAxes: [{
                    stacked: true
                }],
                yAxes: [{
                    stacked: true
                }]
            }
          }
      });
    </script>

    <script src="js/vis.js"></script>

    <script type="text/javascript">
        var nodes = null;
        var edges = null;
        var network = null;

        function draw() {
          // create people.
          // value corresponds with the age of the person
          
          nodes = [<% graph_data.nodes.forEach(node => { %><%- JSON.stringify(node) %>,<% }) %>];

          // create connections between people
          // value corresponds with the amount of contact between two people
          edges = [<% graph_data.edges.forEach(edge => { %><%- JSON.stringify(edge) %>,<% }) %>];

          // Instantiate our network object.
          var container = document.getElementById('mynetwork');
          var data = {
            nodes: nodes,
            edges: edges
          };
          var options = {
            nodes: {
              shape: 'dot',
              scaling: {
                customScalingFunction: function (min,max,total,value) {
                  return value/total;
                },
                min:5,
                max:150
              }
            }
          };
          network = new vis.Network(container, data, options);
          console.log(network);
        }
      </script>
  </body>